crear swapfile
dd if=/dev/zero count=0 seek=1G bs=1 of=/swap
mkswap /swap
swapon /swap

crear user para administracion
useradd -G wheel snake
passwd snake

zona horaria
timedatectl set-timezone America/Santiago

actualizar instalar paquetes adicionales y desabilitar selinux
yum -y update
yum -y install vim firewalld bash-completion git
cp /etc/ssh/sshd_config{,.bak}
sed -i 's/#Port 22/Port 2234/' /etc/ssh/sshd_config
sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config
systemctl start firewalld; systemctl enable firewalld; systemctl enable sshd;
firewall-cmd --add-port=2234/tcp --permanent
firewall-cmd --reload
systemctl restart firewalld; systemctl restart sshd;
reboot

install rvm (no user root)
curl -L https://get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
rvm requirements
rvm install 2.5.0
rvm --default use ruby-2.5.0
gem install bundler
gem install rails -v 5.0.0

instalar apache passenger
sudo yum install -y epel-release pygpgme curl
sudo curl --fail -sSLo /etc/yum.repos.d/passenger.repo https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo
sudo yum install -y mod_passenger

habilitar puertos y servicio apache
sudo systemctl start httpd; sudo systemctl enable httpd;
sudo firewall-cmd --add-service=http --permanent
sudo firewall-cmd --add-service=https --permanent
sudo firewall-cmd --reload

validar instalacion de passenger (si algo da error no continuar hasta solucionar problema...)
passenger-config validate-install

instalar memcached
sudo yum -y install memcached
sudo systemctl start memcached
sudo systemctl enable memcached

instalar y configurar postgresql
sudo yum install postgresql-server postgresql-contrib
sudo firewall-cmd --add-service=postgresql --permanent
sudo firewall-cmd --reload
sudo postgresql-setup initdb
sudo cp /var/lib/pgsql/data/pg_hba.conf{,.bak}
sudo sed -i 's/ident/md5/g' /var/lib/pgsql/data/pg_hba.conf
sudo systemctl start postgresql
sudo systemctl enable postgresql
sudo -i -u postgres
psql
ALTER USER postgres WITH PASSWORD 'PASSWD';

agregar usuario a grupo apache y crear directorio para proyectos
sudo usermod -aG apache snake
sudo mkdir -p /var/www/proyects
sudo chown -R apache:apache /var/www/proyects
sudo chmod -R 775 /var/www/proyects

instalar nodejs
sudo yum install -y gcc-c++ make
curl -sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -
sudo yum install nodejs -y

setear environment de produccion
echo "export RAILS_ENV=production" >> ~/.bashrc
source ~/.bashrc

instalar librerias postgresql
sudo yum install postgresql-libs postgresql-devel

crear proyecto simple
cd /var/www/proyects 
rails new test_rails -d postgresql
rails g scaffold Car year:integer color:text

agregar gema para environment
echo "gem 'dotenv-rails'" >> Gemfile
bundle install
bundle exec rake secret RAILS_ENV=production

setear key_base
echo "export SECRET_KEY_BASE=322222......" >> ~/.bashrc
rake assets:precompile

crear environment file (root de la aplicacion)
vim .env 
POSTGRES_USER=USER
POSTGRES_PASSWORD=PASSWD
POSTGRES_HOST=localhost
POSTGRES_DB=NAME_BD

establecer permisos
chmod 0600 .env

editar archivo database
vim config/database.yml

default: &default
  adapter: postgresql
  encoding: unicode
  username: <%= ENV['POSTGRES_USER'] %>
  password: <%= ENV['POSTGRES_PASSWORD'] %>
  timeout: 5000
  template: template0
  host: <%= ENV['POSTGRES_HOST'] %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

production:
  <<: *default
  database: <%= ENV['POSTGRES_DB'] %>

crear database y correr migracion
rake db:setup
rake db:migrate

configurar virtualhosts apache
cd /etc/httpd
sudo mkdir sites-available
sudo mkdir sites-enabled
sudo sh -c 'echo "IncludeOptional sites-enabled/*.conf" >> /etc/httpd/conf/httpd.conf'

RUBY-COMMAND para apache (la salida se debe agregar a virtualhost)
passenger-config about ruby-command | grep -i command | head -n 1 | awk '{print $2}'


sudo sh -c 'cat > /etc/httpd/sites-available/localhost.conf <<'EOF'
<VirtualHost *:80>
    ServerName localhost
    DocumentRoot /var/www/proyects/test_rails/public

    PassengerRuby RUBY-COMMAND

    <Directory /var/www/proyects/test_rails/public>
      Allow from all
      Options -MultiViews
      # Uncomment this if you're on Apache >= 2.4:
      #Require all granted
    </Directory>
</VirtualHost>
EOF'

crear enlace directo
sudo ln -sf /etc/httpd/sites-available/localhost.conf /etc/httpd/sites-enabled/

crear ruta por default
cd /var/www/proyects/test_rails

rails g controller Home index
agregar index a archivo de ruta
vim config/routes.rb
root to: 'home#index'

reiniciar apache
sudo systemctl restart httpd

instalar redis (require epel)
sudo yum install redis -y
sudo systemctl start redis
sudo systemctl enable redis

habilitar redis en firewall
sudo firewall-cmd --permanent --add-port=6379/tcp
sudo firewall-cmd --reload

# more info https://www.digitalocean.com/community/tutorials/how-to-install-secure-redis-centos-7

configurar sidekiq
crear .service (configurar WorkingDirectory=APP_PATH && ExecStart)
/lib/systemd/system/sidekiq.service

**********
[Unit]
Description=sidekiq
After=syslog.target network.target

[Service]
Type=simple
WorkingDirectory=/opt/myapp/current
# If you use rbenv:
# ExecStart=/bin/bash -lc '/home/deploy/.rbenv/shims/bundle exec sidekiq -e production'
# If you user rvm
# rvm wrapper RUBY_VERSION systemd bundle
# ExecStart=/home/deploy/.rvm/gems/ruby-2.5.1/wrappers/bundle exec sidekiq -e production -C config/sidekiq.yml
# If you use the system's ruby:
ExecStart=/usr/local/bin/bundle exec sidekiq -e production
#change user and group
User=deploy
Group=deploy
UMask=0002

# Greatly reduce Ruby memory fragmentation and heap usage
# https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/
Environment=MALLOC_ARENA_MAX=2

# if we crash, restart
RestartSec=1
Restart=on-failure

# output goes to /var/log/syslog
StandardOutput=syslog
StandardError=syslog

# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq

[Install]
WantedBy=multi-user.target
********

habilitar sidekiq
sudo systemctl enable sidekiq
sudo systemctl start sidekiq

# optimize apache passenger
passenger-status
RESULT = (TOTAL_RAM * 0.75) / TOTAL_MEM_APP
sudo vim /etc/httpd/conf/httpd.conf
PassengerMaxPoolSize RESULT
PassengerMinInstances RESULT

sudo systemctl restart httpd

###
Deployment with capistrano (before vhost config)

install gems
group :development do
  gem 'capistrano'
  gem 'capistrano-bundler'
  gem 'capistrano-rails'
  gem 'capistrano-rvm', github: 'capistrano/rvm'
end

bundle

install capistrano
cap install STAGES=production

###
configure Capfile (set ruby ver)
require "capistrano/setup"

require "capistrano/deploy"

require "capistrano/scm/git"
install_plugin Capistrano::SCM::Git

require "capistrano/rvm"
require "capistrano/bundler"
require "capistrano/rails"
require "capistrano/ssh_doctor"
set :rvm_type, :user
set :rvm_ruby_version, 'ruby 2.5.1p57'

Dir.glob("lib/capistrano/tasks/*.rake").each { |r| import r }

###

Configure deploy file , config/deploy.rb 
get lock (bundle show and ver capistrano, set application, repo_url and user)

lock "~> 3.11.0"

set :application, "NAME_APP"
set :repo_url, "REPO_URL"
set :branch, "master"
set :deploy_via, :copy
set :user, 'USER'

set :deploy_to, 'PATH_SERVER_APP'
#set :linked_files, %w{config/database.yml}
append :linked_files, "config/database.yml", "config/secrets.yml"
append :linked_dirs, "log", "tmp/pids", "tmp/cache", "tmp/sockets", "public/system"
#set :linked_dirs, %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

namespace :deploy do
  desc 'Restart application'
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      execute :touch, release_path.join('tmp/restart.txt')
    end
  end

  after :publishing, 'deploy:restart'
  after :finishing, 'deploy:cleanup'
end


namespace :deploy do
  desc 'Restart application'
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
     
    end
  end
      
  after :publishing, :restart
  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
 
    end
  end
end

###

Configure production file config/deploy/production.rb (set user and server ip)
server 'SERVER_IP', user: 'USER', roles: %w{app db web}


###
create db and secrets file in /shared
database.yml

production:
 host: 127.0.0.1
 adapter: postgresql
 encoding: unicode
 database: DB
 pool: 5
 username: USER
 password: PASS

###
 secrets.yml
 production:
  secret_key_base: SECRET_KEY

###
Finally deploy with capistrano

cap production deploy

#Deploy angular
create dist
ng build --prod
inside dist folder create .htaccess

RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d

# not rewrite css, js and images
RewriteCond %{REQUEST_URI} !\.(?:css|js|map|jpe?g|gif|png)$ [NC]
RewriteRule ^(.*)$ /index.html?path=$1 [NC,L,QSA]

restart httpd
systemctl restart httpd
